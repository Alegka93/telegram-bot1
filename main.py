import logging
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from keep_alive import keep_alive

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int os.getenv (486443841)  # ‚Üê –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ int

keep_alive()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

user_data = {}

def get_start_keyboard():
    return ReplyKeyboardMarkup(keyboard=[["üöÄ –ü–æ—á–∞—Ç–∏ —Ä–µ–º–æ–Ω—Ç"]], resize_keyboard=True)

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            ["üì≤ –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", "üìç –õ–æ–∫–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É"],
            ["üí¨ –ó–≤‚Äô—è–∑–æ–∫ –∑ –º–∞–π—Å—Ç—Ä–æ–º"]
        ],
        resize_keyboard=True
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} started the bot.")
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç iPhone üì±",
        reply_markup=get_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    uid = update.effective_user.id

    if text == "üöÄ –ü–æ—á–∞—Ç–∏ —Ä–µ–º–æ–Ω—Ç":
        return await start(update, context)

    if text == "üì≤ –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É":
        user_data[uid] = {"step": "model"}
        await update.message.reply_text("–í–≤–µ–¥–∏ –º–æ–¥–µ–ª—å iPhone:")

    elif text == "üìç –õ–æ–∫–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É":
        await update.message.reply_text("–ù–∞—à–∞ –∞–¥—Ä–µ—Å–∞: üìç –º. –õ—å–≤—ñ–≤, –≤—É–ª. –ú–µ–ª—å–Ω–∏–∫–∞ 18 Leoland üèõÔ∏è")

    elif text == "üí¨ –ó–≤‚Äô—è–∑–æ–∫ –∑ –º–∞–π—Å—Ç—Ä–æ–º":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–º —É Telegram: @Enforcer1")

    else:
        if uid not in user_data:
            await update.message.reply_text(
                "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –∑–∞–ø—É—Å–∫—É üëá",
                reply_markup=get_start_keyboard()
            )
            return

        step = user_data[uid].get("step")

        if step == "model":
            user_data[uid]["model"] = text
            user_data[uid]["step"] = "problem"
            await update.message.reply_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –∑ iPhone:")

        elif step == "problem":
            user_data[uid]["problem"] = text
            user_data[uid]["step"] = "phone"
            await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

        elif step == "phone":
            user_data[uid]["phone"] = text
            data = user_data.pop(uid)

            username = update.effective_user.username or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ–∑ username"
            message = (
                f"üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ @{username}\n\n"
                f"üì± –ú–æ–¥–µ–ª—å: {data['model']}\n"
                f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {data['problem']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}"
            )
            await context.bot.send_message(chat_id=ADMIN_ID, text=message)
            await update.message.reply_text(
                "‚úÖ –î—è–∫—É—î–º–æ! –ú–∞–π—Å—Ç–µ—Ä —Å–∫–æ—Ä–æ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ —Ç–æ–±–æ—é.",
                reply_markup=get_main_keyboard()
            )
        else:
            user_data.pop(uid, None)
            await update.message.reply_text(
                "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω–∏ –∑–∞–Ω–æ–≤–æ /start",
                reply_markup=get_main_keyboard()
            )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    if update and hasattr(update, "message") and update.message:
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()
