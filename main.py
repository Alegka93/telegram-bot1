from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

from keep_alive import keep_alive  # üëà –∑–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
keep_alive()  # üëà –∞–∫—Ç–∏–≤—É—î —Å–µ—Ä–≤–µ—Ä

TOKEN = "7847656840:AAEoG9zSN9gCmJ25VHzmzqOXtlO7aV14_TI"
ADMIN_ID = 486443841  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

user_data = {}

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –±–æ—Ç.")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
app.run_polling()
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üì≤ –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", "üìç –õ–æ–∫–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É"],
                ["üí¨ –ó–≤‚Äô—è–∑–æ–∫ –∑ –º–∞–π—Å—Ç—Ä–æ–º"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç iPhone üì±",
        reply_markup=reply_markup)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üì≤ –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –º–æ–¥–µ–ª—å iPhone:")
        user_data[update.effective_user.id] = {"step": "model"}
    elif text == "üìç –õ–æ–∫–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É":
        await update.message.reply_text(
            "–ù–∞—à–∞ –∞–¥—Ä–µ—Å–∞: üìç –º. –õ—å–≤—ñ–≤, –≤—É–ª. –ú–µ–ª—å–Ω–∏–∫–∞ 18 Leoland ")
    elif text == "üí¨ –ó–≤‚Äô—è–∑–æ–∫ –∑ –º–∞–π—Å—Ç—Ä–æ–º":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–º —É Telegram: @Enforcer1")
    else:
        uid = update.effective_user.id
        if uid in user_data:
            step = user_data[uid].get("step")

            if step == "model":
                user_data[uid]["model"] = text
                user_data[uid]["step"] = "problem"
                await update.message.reply_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –∑ iPhone:")
            elif step == "problem":
                user_data[uid]["problem"] = text
                user_data[uid]["step"] = "phone"
                await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
            elif step == "phone":
                user_data[uid]["phone"] = text
                data = user_data[uid]
                message = (
                    f"üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ @{update.effective_user.username or '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ–∑ username'}\n\n"
                    f"üì± –ú–æ–¥–µ–ª—å: {data['model']}\n"
                    f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {data['problem']}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}")
                await context.bot.send_message(chat_id=ADMIN_ID, text=message)
                await update.message.reply_text(
                    "‚úÖ –î—è–∫—É—î–º–æ! –ú–∞–π—Å—Ç–µ—Ä —Å–∫–æ—Ä–æ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ —Ç–æ–±–æ—é.")
                del user_data[uid]


app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND,
                               handle_message))
app.run_polling()
